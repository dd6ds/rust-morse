name: Linux i686 Binary Release

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    steps:


    - name: Checkout code
      uses: actions/checkout@v4

    - name: Get version from Cargo.toml
      id: get_version
      run: |
       version=$(grep '^version' Cargo.toml | head -n 1 | sed 's/version = "\(.*\)"/\1/')
       echo "cargo_version=$version" >> $GITHUB_OUTPUT


    - name: Install Rust toolchain for Windows
      run: rustup target add i686-unknown-linux-gnu

    - name: Install MinGW and zip
      run: |
        sudo apt-get update
        sudo apt-get install -y mingw-w64 zip
        sudo apt-get update && sudo apt-get upgrade -y && sudo apt-get full-upgrade -y && sudo apt-get install pkg-config libssl-dev clang libx11-dev libxext-dev libxft-dev libxinerama-dev libxcursor-dev libxrender-dev libxfixes-dev libpango1.0-dev libgl1-mesa-dev libglu1-mesa-dev cmake gettext librust-alsa-dev librust-udev-dev libfltk1.3-dev libfltk1.3t64 mingw-w64 gcc-multilib curl g++ pkg-config libx11-dev libasound2-dev libudev-dev librust-alsa-sys-dev libasound2-dev upx-ucl

    - name: Build release binary
      run: cargo build --release --target i686-unknown-linux-gnu

    - name: Prepare release artifacts
      run: |
        mkdir release
        cp target/i686-unknown-linux-gnu/release/morse release/
        cp icon.png release/
        cp *.mo release/
        cd release
        zip -r morse_linux-i686-v${{ steps.get_version.outputs.cargo_version }}.zip ./*
        ls -lathr *.zip
        cd ..

    - name: Create GitHub Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref_name }}
        release_name: Release ${{ github.ref_name }}
        draft: false
        prerelease: false
        allow_update: true

    - name: Delete existing asset
      run: |
        ASSET_ID=$(gh api \
          repos/${{ github.repository }}/releases/tags/${{ github.ref_name }} \
          | jq '.assets[] | select(.name == "release.zip") | .id')
        if [ -n "$ASSET_ID" ]; then
          gh api --method DELETE \
            /repos/${{ github.repository }}/releases/assets/$ASSET_ID
        fi


    - name: Upload Release Asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: release/morse_linux-i686-v${{ steps.get_version.outputs.cargo_version }}.zip
        asset_name: morse_linux-i686-v${{ steps.get_version.outputs.cargo_version }}.zip
        asset_content_type: application/zip
