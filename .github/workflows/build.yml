name: Release Rust + FLTK

on:
  push:
    tags:
      - '*.*.*'

jobs:
  build-and-release:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true

      - name: Install FLTK deps (Linux)
        if: runner.os == 'Linux'
        run: sudo apt-get update && sudo apt-get install -y libx11-dev libxext-dev libxft-dev libxrender-dev libgl1-mesa-dev libglu1-mesa-dev

      - name: Build release binary
        run: cargo build --release

      - name: Set binary name
        id: vars
        run: |
          echo "BIN_NAME=$(basename $(find target/release -maxdepth 1 -type f -executable | head -n 1))" >> $GITHUB_ENV

      - name: Package binaries
        run: |
          cd target/release
          if [ "${{ runner.os }}" = "Windows" ]; then
            7z a "${{ env.BIN_NAME }}-${{ matrix.os }}.zip" "${{ env.BIN_NAME }}.exe"
          else
            tar czf "${{ env.BIN_NAME }}-${{ matrix.os }}.tar.gz" "${{ env.BIN_NAME }}"
          fi
          
      - name: Extract tag name
        id: extract_tag
        run: echo "TAG_NAME=${GITHUB_REF##*/}" >> $GITHUB_ENV

      - name: Create GitHub Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ env.TAG_NAME }}
          release_name: Release ${{ env.TAG_NAME }}
          draft: false
          prerelease: false


      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: target/release/${{ env.BIN_NAME }}-${{ matrix.os }}${{ runner.os == 'Windows' && '.zip' || '.tar.gz' }}
          asset_name: ${{ env.BIN_NAME }}-${{ matrix.os }}${{ runner.os == 'Windows' && '.zip' || '.tar.gz' }}
          asset_content_type: application/octet-stream

