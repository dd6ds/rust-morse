name: morse build

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]


jobs:
  build:
    # Setzt je nach Ziel das passende OS-Image für optimales Cross-Compiling
    strategy:
      fail-fast: false
      matrix:
        include:
          - target: x86_64-pc-windows-gnu
            os: ubuntu-latest
            archive: zip
          - target: i686-pc-windows-gnu
            os: ubuntu-latest
            archive: zip
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-latest
            archive: tar.gz
          - target: i686-unknown-linux-gnu
            os: ubuntu-latest
            archive: tar.gz
          - target: x86_64-apple-darwin
            os: macos-latest
            archive: tar.gz
          - target: aarch64-apple-darwin
            os: macos-latest
            archive: tar.gz

    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout source
        uses: actions/checkout@v3

      # Für Linux (auch Windows GNU Cross-Compilation auf Linux Runner) native Build-Tools installieren
      - name: Install dependencies for Linux builds
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential gcc-multilib g++-multilib
          sudo apt-get update && sudo apt-get upgrade -y && sudo apt-get full-upgrade -y && sudo apt-get install pkg-config libssl-dev clang libx11-dev libxext-dev libxft-dev libxinerama-dev libxcursor-dev libxrender-dev libxfixes-dev libpango1.0-dev libgl1-mesa-dev libglu1-mesa-dev cmake gettext librust-alsa-dev librust-udev-dev libfltk1.3-dev libfltk1.3t64 mingw-w64 gcc-multilib curl g++ pkg-config libx11-dev libasound2-dev libudev-dev librust-alsa-sys-dev libasound2-dev upx-ucl

      # Für macOS keine zusätzlichen Schritte nötig, GitHub Runner hat Xcode etc. vorinstalliert

      - name: Setup Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          target: ${{ matrix.target }}
          override: true

      - name: Build release binary
        run: cargo build --release --target ${{ matrix.target }}

      - name: Prepare release directory and archive
        run: |
          mkdir -p release
          binary_name="morse" # Ersetze durch den tatsächlichen Binary-Namen aus Cargo.toml [package] name
          ext=""
          if [[ "${{ matrix.target }}" == *windows* ]]; then
            ext=".exe"
          fi
          binary_path="target/${{ matrix.target }}/release/${binary_name}${ext}"
          cp "$binary_path" release/
          
          cd release
          if [[ "${{ matrix.archive }}" == "zip" ]]; then
            zip -r "../${binary_name}-${{ matrix.target }}.zip" "${binary_name}${ext}"
          else
            tar czf "../${binary_name}-${{ matrix.target }}.tar.gz" "${binary_name}${ext}"
          fi
          cd ..

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}


      - name: Upload release asset
        run: echo "TAG_NAME=$(echo ${GITHUB_REF#refs/tags/})" >> $GITHUB_ENV
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TAG_NAME: ${{ github.ref_name }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./morse-x86_64-unknown-linux-gnu.tar.gz
          asset_name: morse-x86_64-unknown-linux-gnu.tar.gz
          asset_content_type: application/octet-stream

